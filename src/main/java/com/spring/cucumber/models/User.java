package com.spring.cucumber.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.*;
import org.hibernate.Hibernate;

import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.*;

@Entity
@Table(name = "users")
@NoArgsConstructor
@AllArgsConstructor
@JsonPropertyOrder({"username","password","firstName","middleName","lastName","dateOfBirth","email",
	"mobile","address"})
@Getter
@Setter @ToString
public class User {
	
	@Column(nullable = false)
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Schema(
			title = "User ID",
			description = "User ID of the user. Auto-generated by the application",
			example = "1"
	)
	@JsonIgnore
	private long id;

	@Size(min = 6, max = 12, message = "Username must be a minimum of 6 and maximum of 12 Characters")
	@NotNull(message = "Username Should Not Be Null!!!")
	@Schema(
			title = "username",
			description = "Username of the user",
			example = "rahulraogrr",
			required = true,
			minLength = 6,
			maxLength = 12
	)
	@Column(name = "username", nullable = false, unique = true, length = 12)
	private String username; 
	
	@Size(message = "Password Should be Minimum of 8 and Maximum of 20 Characters", min = 8, max = 20)
	@NotBlank(message = "Password Should Not Be Blank")
	@NotNull(message = "Password Should Not be Null")
	@Schema(
			title = "password",
			description = "Password of the user which will be hashed and stored in database",
			example = "06Airoli@Mh",
			required = true,
			minLength = 8,
			maxLength = 100
	)
	@ToString.Exclude
	@Column(name = "password_hash", nullable = false, length = 100)
	private String password;
	
	@Schema(
			title = "salt",
			description = "Password Salt will be used by the application for internal use"
	)
	@JsonIgnore
	@Column(name = "salt", length = 64)
	private String salt;
	
	@NotBlank(message = "Firstname is Blank!!!")
	@NotNull(message = "Firstname is mandatory!!!")
	@Schema(
			title = "firstName",
			description = "First Name of the user",
			example = "Rahul Rao",
			required = true,
			minLength = 1,
			maxLength = 64
	)
	@Column(name = "first_name", nullable = false, length = 64)
	private String firstName;
	
	@Size(message = "Middle name must be maximum of 32 characters", max = 32)
	@Schema(
			title = "middleName",
			description = "Middle Name of the user",
			maxLength = 32
	)
	@Column(name = "middle_name", length = 32)
	private String middleName;

	@NotBlank(message = "Lastname is Blank")
	@NotNull(message = "Lastname is null")
	@Schema(
			title = "lastName",
			description = "Last Name of the user",
			example = "Gonda",
			required = true,
			minLength = 1,
			maxLength = 64
	)
	@Column(name = "last_name", nullable = false, length = 64)
	private String lastName;

	@Schema(
			title = "Email",
			description = "Email",
			example = "rahulrao.grr@gmail.com",
			required = true,
			maxLength = 64
	)
	@Column(name = "email", nullable = false, unique = true, length = 64)
	private String email;

	
	@NotBlank(message = "Mobile number should not be blank")
	@Size(message = "Mobile number should be minimum of 10 and maximum of 10 digits", min = 10, max = 10)
	@NotNull(message = "Mobile is mandatory!!!")
	@Schema(
			title = "mobile",
			description = "Mobile",
			example = "9619132262",
			required = true,
			maxLength = 15
	)
	@Column(name = "mobile", nullable = false, unique = true, length = 10)
	private String mobile;
	
	@Column(nullable = false)
	@Schema(
			title = "dateOfBirth",
			description = "Date Of Birth",
			required = true
	)
	@Temporal(TemporalType.DATE)
	private Date dateOfBirth;

	@Valid
	@NotNull(message = "Address is mandatory")
	@NotEmpty(message = "Address is Empty")
	@ToString.Exclude
	@Schema(
			title = "address",
			description = "Address",
			required = true
	)
	@OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)
	private List<Address> address= new ArrayList<>();

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
		User user = (User) o;

		return Objects.equals(id, user.id);
	}

	@Override
	public int hashCode() {
		return 562048007;
	}
}